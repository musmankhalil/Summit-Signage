import { connect } from 'react-redux';
import { meFromToken, meFromTokenSuccess, meFromTokenFailure, resetToken,fetchUserMedia,fetchUserMediaSuccess,fetchUserMediaFailure,fetchSettings, fetchSettingsSuccess,fetchSettingsFailure ,fetchFolders, fetchFoldersSuccess, fetchFoldersFailure } from '../actions/users.js';
import { changeParentConsole} from '../actions/popup';

import App from '../components/App.js';


const mapDispatchToProps = (dispatch) => {
  console.log('---app container--');
  return {
  	 loadUserFromToken: () => {
      let token='';
      if(sessionStorage.getItem('jwtToken')){
        token =sessionStorage.getItem('jwtToken');
      }else if(localStorage.getItem('temptkn')){
        sessionStorage.setItem('jwtToken',localStorage.getItem('temptkn'));
        token =sessionStorage.getItem('jwtToken');
      }else{
        const urlParams = new URLSearchParams(window.location.search);
        const tokenParam = urlParams.get('token');
        sessionStorage.setItem('jwtToken',tokenParam);
        token =sessionStorage.getItem('jwtToken');
      }
   
  	 token = sessionStorage.getItem('jwtToken');
      console.log('**session**', token);
  	 	if(!token || token == '' || token==null || token=='null') {//if there is no token, dont bother
        console.log('--there is no login--');
        dispatch(resetToken());
  	 		return  true;

  	 	}
      else{
  	 //fetch user from token (if server deems it's valid token)
      let isImUser = sessionStorage.getItem('isIAMUser');
      let imuserDetails = isImUser?sessionStorage.getItem('iAmUsers'):null;
      dispatch(meFromToken(token,imuserDetails))
        .then((response) => {
          console.log('--app container resp--', response);
          if (!response.error) {
          	//reset token (possibly new token that was regenerated by the server)
            console.log("success token",response.payload);
          	sessionStorage.setItem('jwtToken', response.payload.data.token);
            dispatch(meFromTokenSuccess(response.payload));
            
            //get setting for logged in user
            dispatch(fetchSettings(token)).then((settings) => {
              console.log('settigs',settings);
                !settings.error ? dispatch(fetchSettingsSuccess(settings.payload.data)) : dispatch(fetchSettingsFailure(settings.payload.data));
              });
            // get library and media for logged in user
            console.log('--[app container] Fetching all user media--');
            dispatch(fetchFolders(token)).then((response) => {
            !response.error ? dispatch(fetchFoldersSuccess(response.payload.data)) : dispatch(fetchFoldersFailure(response.payload.data));
          });
            dispatch(fetchUserMedia(token)).then((medias) => {
                !medias.error ? dispatch(fetchUserMediaSuccess(medias.payload.data)) : dispatch(fetchUserMediaFailure(medias.payload.data));
              });
          } else {
          	sessionStorage.removeItem('jwtToken');//remove token from storage
            dispatch(meFromTokenFailure(response.payload));
          }
        });
        }
              //return true;
  	 },
     resetMe: () =>{
     	sessionStorage.removeItem('jwtToken'); //remove token from storage
     	dispatch(resetToken());
     },

     changeConsole: (consoleName) => {
      return dispatch(changeParentConsole(consoleName));
    }
  }
}
const mapStateToProps = (state) => {
  return {
    user: state.user,
    common: state.popup
  };
}

export default connect(mapStateToProps, mapDispatchToProps)(App);
